Devops es una serie de practicas culturales y herramientas que permiten a las organizaciones
poder llevar software de manera muy agil a los usuarios que lo requieren.

SSH pasw kappa123

----- Que es DevOps

Se encarga desde el momento que se escribe el codigo, hasta el momento donde el mismo codigo
corre en los diferentes dispositivos de los clientes de que los procesos sean seguros, automatizados, 
con practicas de calidad.

    -   Pruebas Automatizadas   -
    Asegura la calidad del codigo.

    -   Continuous Integration (CI)   -
    Automatiza los procesos de calidad.

    -   Continuous Delivery (CD)   -
    Automatiza la distribucion de aplicaciones.

    -   Monitoreo y logging   -
    Detecta problemas oportunamente.

    -   Microservicios   -
    Separa las funcionalidades de la aplicacion en servicios independientes.

    -   Comunicacion y colaboracion   -
    Une diversos equipos y flujos de trabajo.



----- Ciclo de vida del DevOps

La representacion grafica de DevOps casi siempre es un loop infinito con unos pasos a seguir
para el correcto desarrollo de un proyecto
Este loop tiene unos pasos o estados;

    --------------- Desarrollo

    - Plan:
    O tambien Planificacion, En este paso estamos en desarrollo, se organizan cuales son los
    labores, requerimientos que se necesitan implementar. para esto se utilizan herramientas de
    planificacion como issues o boards.

    - Creacion:
    Escribir codigo para resolver el problema del negocio, donde implementamos git para el versionamiento
    para que el equipo de trabajo funcione de una manera agrupada.

    - Verificacion:
    En este paso se corren las pruebas automatizadas, donde se definen las reglas que tienen que probarse.
    Tambien se puede correr pruebas de seguridad, construccion del proyecto para determinar si las 
    dependencias son correctas.

    - Empaquetar:
    Aqui es donde se debe de organizar como debemos empaquetar toda la aplicacion, microservicios 
    o funciones.

    --------------- Operaciones

    - Version nueva:
    Nueva version que llega a produccion, esto se puede automatizar por medio de Continuous Delivery
    pero este tambien podria traer problemas, se envia una nueva version que contenga bugs, este lo
    enviaria a produccion, por lo que se recomienda desplegar una version que se este 100% seguro
    de que no haya bugs.

    - Configuracion:
    Modificar posiblemente la configuracion base, ya que hay un nuevo estado en la aplicacion.

    - Monitorear:
    Verificar como esta funcionando el codigo, en cada dispositivo.


Los beneficios de este ciclo de vida son:

- Velocidad
- Rapida distribucion
- Confiabilidad
- Escala
- Colaboracion
- Seguridad



----- Que es GitLab

Es una compañía que realiza un proyecto open source, un producto especializado en el ciclo de vidas del DevOps.

GitLab CI es el corazon de GitLab permite unir todos los productos de GitLab,
y entregarlos en un paquete que les sirva directamente y rapidamente para los Devops.

permite empaquetar codigo;
    - Container registry
    - Paquetes privados (NPM y Maven)

Distribucion;
    - Deployment strategies
    - Ambientes
    - Gitlab pages
    - Feature flags

Configuracion;
    - Auto DevOps
    - Integracion con Kubernetes
    - Knative serverless
    - Manejo de secretos
    - Chatops

Monitoreo;
    - Prometheus
    - Jaeger
    - Sentry

Seguridad;
    - Container scanning
    - Dependency scanning
    - Dynamic security testing (DAST)
    - Static security testing (SAST)
    - Manejo de licencias
    - Security dashboard

Defensa;
    Firewall, Threat Detection, Data loss reventions y mas, son capacidades de GitLab que posiblemente 
    esten en desarrollo o ya se desarrollaron (2019)



Formas de autenticarse en GitLab:

    - Username/Password
    Login

    - 2FA (Two factor authetication)
    OTP y FIDO U2F

    - SSH Key
    Push code



Los grupos dentro de GitLab sirven para segmentar los equipos de trabajo dentro de un proyecto
estos grupos se utilizan en GitLab a traves de 'namespaces';
Ej:
https://gitlab.com/username
https://gitlab.com/groupname
https://gitlab.com/groupname/subgroup

para los nombres existen palabras reservadas;

Commits, Create, Files, New, Wikis, etc.

Mas info:
https://docs.gitlab.com/ee/user/reserved_names.html


Los grupos pueden tener 3 tipos de 'visibilidad';

    - Public
    cualquier persona puede ver el contenido asi no haya iniciado sesion.
    - Interna
    solo los usuarios que iniciaron sesion puede tener acceso al grupo.
    - Privada
    permite que los proyectos y grupos sean solo accesibles a traves de los permisos otorgados en los mismos.




----- Autorizacion

    - Guest
    Tiene solo acceso de lectura, no puede modificar ningun archivo, no puede contribuir al codigo, 
    no puede abrir issues.

    - Reporter
    Pueden crear issues, comentarlos, pero no pueden añadir codigo.

    - Developer
    permite tener acceso de los pipelines de CI, issues, branchs, etc. pero no puedes administrar
    nuevos miembros, ni tener acceso a las configuraciones secretas del proyecto.

    - Owner / Maintainer
    Eres el creador o administrador del proyecto. tiene acceso a todo el proyecto.



----- proyectos

    - Issue tracker
    Es especifico para equipos de desarrollo de software que trabajan de manera agil,
    adentro hay conceptos como milestones, estimados de tiempo, etc.

    - Code repository
    Lugar central que permite compartir, colaborar alrededor del codigo.

    - Gitlab CI
    Automatizacion del flujo de trabajo del proyecto.



Las funcionalidades que tiene GitLab estan disponible siempre para los proyecto que son publicos, 
si se crea un proyecto privado, este tendra acceso a unas cuantas funcionalidades, pero no a la 
totalidad existentes dentro de GitLab. (Si se desea tiene acceso a estas funcionalidades en un 
grupo privado, GitLab tiene unas opciones de pago disponibles para esto.)


---- Etiquetas dentro de un issue

Permiten categorizar los issues o merge requests con titulos descriptivos;
Ej.
Si un issue se relaciona con la seguridad debera tener una etiqueta 'Security' para indicar
de que tipo es el issue.

Permiten filtrar y buscar en GitLab.
Permite seguir temas a traves de las notificaciones.


uno puede 'suscribirse' a una o varias etiquetas, para que cuando alguien haga uso de ella
nos envie una notificacion indicando donde se utilizo para estar pendiente del tema.


----- Pesos de un issue

Permite asignar un valor numerico (el numero debe de poder representarse en 4-bytes) que seria 
una estimacion del peso de dicho issue.
Esto representa el nivel de importancia de los issues, mas no indica que si es de un alto numero
quiere decir que se esta en la obligacion de solucionarlo ocupando 100% tu tiempo.

Dentro de los pesos hay varias formas de asignarlo;
Utilizan los 'puntos Fibonacci' (1, 2, 3, 5, 8, 13, etc.)
o tambien utilizan las tallas de camisas (S, M, L, XL, XXL, etc.)

con el fin de entender el nivel de importancia del issue, obviamente la decision recae en todo el 
equipo, ya que el objetivo es que todos entiendan la forma en que se planea utilizar el peso.



----- Milestones

Son una forma de agrupar varios Issues, estableciendo un tiempo determinado en el cual se planean 
completarlos.

hay varias formas de agruparlos y asignarles el tiempo;
normalmente cuando manejan agile se pueden vovler del mismo tamaño de un Sprint.
tambien puede ser del tamaño de una version, que se planee sacar (Release).

Ejemplo de Release;
V1.1.2 (donde .2 podria ser ese milestones procesado y entregado.)



----- Burndown chart

Es un concepto de agile, en el cual podemos evaluar en que punto o cuanto progreso llevamos dentro 
de un sprint y permite tomar acciones cuando se evolue si es relevante tomar dichas decisiones.

Es una especie de alarma en la cual nos muestra si vamos adelantados o atrasados con respecto al 
tiempo y desarrollo de dicho sprint.



----- Service desk

- Permite dar soporte a traves de email a tus clientes directamente desde Gitlab.
- Permite que el equipo no tecnico interno de la empresa reporte bugs, abra issues sin necesidad 
de que tengan una cuenta en Gitlab.


Correo generado por Gitlab del proyecto para que las personas externas reporten bugs, etc;
incoming+platzi-curso-gitlab-cursoplatzi-gitlab-13360550-issue-@incoming.gitlab.com


estos issues son de tipo Confidencial.




----- Lista de Quick Actions dentro de Gitlab
https://docs.gitlab.com/ee/user/project/quick_actions.html





------------------
A continuacion del curso, se hace un proyecto de angular, para esto
hay que tener instalado Node JS y NPM.

https://www.ecodeup.com/como-instalar-node-js-y-su-gestor-de-paquetes-npm-en-windows/
https://nodejs.org/es/

luego instalamos el cli de angular con el siguiente comando
npm install -g @angular/cli

------------------




Merge Requests

- Es la base de la colaboracion alrededor del codigo de Gitlab.
- Es tan solo unir los cambios de una rama con otra.
- Permite tener visibilidad sobre los datos importantes, antes de hacer merge.

cuando se tiene un merge request, este tiene en el titulo un 'prefijo' que es 'WIP:'
y por ende no nos dejara hacer el merge, ya que esto significa 'Work In Progress'
por ende el sistema considera que todavia no se ha terminado.

al terminar la activdad de ese merge, y verficcar que es lo esperado en dicho merge;
se entra al merge dentro de GitLab y en la seccion Merge Requests seleccionamos
el que completamos, luego hay un widget llamado 'Resolve WIP status' que le tendremos que dar
para que el titulo del merge cambie y se permita hacer dicha accion.

luego de esto, si el merge no tiene a nadie asignado, se le asigna a alguien para que esa persona
sea la que haga el merge. (Casi siempre se selecciona al encargado del repo ó lider del equipo).


El archivo Bug.md que esta dentro de la carpeta .gitlab/issue_templates del proyecto
es un archivo guia de Issue que detecta gitlab y lo coloca como opcion para que cuando alguien
trate de hacer un issue tenga esa opcion disponible y asi organizar y simplificar el issue.



-----GitLab CI

---------

Documentacion para ver como implementar Gitlab CI de acuerdo a algun lenguaje de programacion
https://docs.gitlab.com/ee/ci/examples/

---------

Para activar la integracion continua debemos de tener un archivo llamado '.gitlab-ci.yml'
que en este es donde va estar la configuracion de lo que se desea hacer automaticamente.

Para comprobar que el archivo '.gitlab-ci.yml' funcione y este escrito correctamente
escribimos lo siguiente al final de la URL del proyecto;

'/-/ci/lint'

Ej:

https://gitlab.com/platzi-curso-gitlab/cursoplatzi-gitlab/-/ci/lint

Nos mostrara un textbox en el cual podremos pegar nuestro codigo del .gitlab-ci.yml y lo podremos
validar, para comprobar si no hay ningun error de sintaxtis.



----- Gitlab Pages

Es un hosting estatico para colocar un website.

para configurar gitlab pages se tiene que hacer por medio de gitlab CI.
hay que colcoar un Job especifico que va ser el encargado de hacer el deployment de la aplicacion 
estatica. (El job se llama Pages).

Este tambien permite tener dominios personalizados.

Todo lo que se planee hacer deploy debe ir a un directorio llamado public (ej: './public')



----- Gitlab AutoDevOps

Es una solucion que permite generar un flujo de DevOps inmediato con la creacion del proyecto 
que incluye todas las mejores practicas.

    Features:
    - Auto Build
    - Auto Test
    - Auto Code Quality
    - Auto SAST
    - Auto dependency scanning
    - Auto container scanning
    - Auto review apps
    - Auto Dast
    - Auto Deploy
    - Auto performance
    - Auto testing

    Prerequisitos:
    - Gitlab runner
    - Kubernetes
    - Base domain
    - Prometheus


Para incluir AutoDevOps cuando ya se tiene el archivo .gitlab-ci.yml 
solo hay que añadir el siguiente bloque de codigo;

    include:
        template: Auto-Devops.gitlab-ci.yml



---------------------------------------
Implementando Gitlab AutoDevOps


Creacion de Kubernetes - Cluster con Google cloud (Dentro de la opcion de Kubernetes de Gitlab)

Aplicaciones necesarias dentro de Kubernetes cluster.

Instalar Helm Tiller es el manejador de paquetes dentro de Kubernetes.
Es necesario si deseamos instalar el resto de aplicaciones.

-- Ingress
Es un load balancer que va generar una IP conectar todo lo de Gitlab con el Kubernete cluster.


-- Cert-Manager
Es un controlador de certificados de Kubernetes nativo.
Esto permite generar y renovar de manera automatica los certificados de seguridad.
(Son certificados libres)

-- Prometheus
Sirve para monitorear la salud del cluster, metricas del performance del cluster.


luego de esto nos vamos para Google Cloud y nos vamos a la seccion 'Red de VPC'
aqui, vamos a Direcciones IP externas y dentro buscamos la IP que se genero cuando
se termino de instalar Ingress.

a esta IP la modificamos y le decimos que no va ser efimera si no estatica, 
le asignamos un nombre y una descricion.




---------------------------------------
Gitlab container registry

no so nun concepto de GitLab si no de Docker.
Pero GitLab es uno de los proveedores que permiten tener registros privados
de los contenedores.



---------------------------------------
Termino: DevSecOps

---------------------------------------
Firmas de Seguridad (GPG) (Pretty Good Privacy) (realmente es PGP pero lo llamaron GPG)

- Permite identificar, sin lugar a dudas, de quien proviene el commit.
- Añade una capa adicional de seguridad de Git, para prevenir "Caballos de Troya"
- GitLab despliega un banner junto a los commits, para mostrar que dichos commits estan verificados

el comando para esto es 'gpg'

- Para generar una llave;
    gpg --full-gen-key

Despues elegimos el tipo de llave que vamos a crear;
   (1) RSA and RSA (default)
   (2) DSA and Elgamal
   (3) DSA (sign only)
   (4) RSA (sign only)

La opcion 1 es para firmar y encriptar.

Despues decidimos el tamaño de la llave en Bits; mientras mas grande sea, mas dificil es 
de corromper
Ya de ahi, le damos el tiempo de expiracion de la llave;
         0 = key does not expire
      <n>  = key expires in n days
      <n>w = key expires in n weeks
      <n>m = key expires in n months
      <n>y = key expires in n years

donde 0 quiere decir que no expira.


(Elegi un mes;
Key expires at Sun Aug 18 15:13:00 2019 HPS)

Para que gitlab confirme la autenticacion de los commits debemos registrar en el GPG
el mismo correo con el que estamos registrados dentro de gitlab.


pinentry se abrira para pedir una contraseña para proteger la llave GPG
digitamos una contraseña que sea muy fuerte y repetimos y listo se genera.
psw ImaPragmatic?12

- Comando para listar las llaves que tenemos.
    gpg --list-secret-key --keyid-format LONG 'email'
    
    email = correo con el que registramos la/s llave/s.
    (Posibles opciones de formato {none|short|0xshort|long|0xlong})


Para ver el bloque de llave publica realizamos lo siguiente.

del resultado del comando de consulta, verificamos que llave deseamos utilizar,
a esta llave tomamos la parte 'sec' y copiamos lo que esta despues del 'rsa.../'

con ese codigo ejecutamos el siguiente comando;

    gpg --armor --export 'codigo'

estoy generara un bloque grande encriptado, que es el que vamos a copiar y pegar
en gitlab para agregar la llave de seguridad.


Para agregarla a git utilizamos el siguiente comando
git config --global user.signingkey 'codigo'
git config --global gpg.program gpg



---------------------------------------
SAST (Static Application Security Testing)

- Corre analisis estatico en el codigo
- Verifica que no existan problemas potenciales de seguridad en el codigo de la aplicacion
- Verifica que no existen secretos "hardcodeados"
- Crea un reporte que es añadido como widget al merge request
- Utiliza la imagen de Docker SAST de Gitlab


Tipos de vulnerabilidades dentro de Git

- Critical
- High
- Medium
- Low
- Unknown


Dependiendo del lenguaje existe una herramienta especifica para correr estas pruebas.
En JAVA se utiliza 'find-sec-bugs'.


---------------------------------------
DAST (Dynamic Application Security Testing)

- Corre escaneos de seguridad en una aplicacion que ya esta en modo 'runtime' o corriendo
- Utiliza OWASP ZAP proxy y ZAP baseline
- Corre analisis pasivo
- Genera un reporte que puede ser verificado en el merge request


---------------------------------------
Continuous Delivery (CD)

Esta opcion dentro de gitlab esta disponible, si configuramos 'AutoDevOps' en el menu de configuracion;
Dentro de la seccion CI/CD, habilitamos la opcion de Auto DevOps y seleccionamos la opcion;
"Despliegue automatico a 'staging', despliegue manual a produccion.

luego de esto creamos una pipeline de la rama master, y este iniciara el proceso, lo unico distinto
sera que dentro del proceso de la pipeline hay nuevos estados;
Despues de 'Test' estara 'Staging' y luego 'Production' que en este estara por partes el proyecto
para ser desplegado manualmente; (Se debe de elegir que porcion del proyecto se desea desplegar).

asi que por medio de esto, podremos controlar que deseamos enviar a produccion y que no. para asi
evitar posibles bugs, que puedan generar perdidas monetarias del proyecto y evitar posibles 
quejas de los clientes.

Esta opcion debe estar pensada de acuerdo a las politicas de la empresa, debe estar acordado con 
las personsas encargadas del proyecto, que consideran como una forma viable de desplegar 
la aplicacion.



--------
Ambientes

normalmente dentro de un proyecto se tiene 3 diferentes ambientes de desarrollo que son;
Staging, Production, Develop.
(sin contar el ambiente local).

Dentro de gitlab hay varios tipos:

    - Estaticos
    Son aquellos que no cambian, levantamos el ambiente y por ejemplo queda en una URL, que no
    va cambiar.
    - Dinamicos
    En los ambientes dinamicos, Gitlab permite crear un ambiente para cada rama, por lo que
    se puede verificar la funcionalidad de cada rama, al momento de hacer un merge request
    o al momento de mostrarlo al cliente, sin tener que bajar el codigo al pc si no que 
    gitlab tiene una opcion llamada Review apps, donde se puede tener un ambiente completo 
    con la funcionalidad de dicho cambio.

    - Protegidos
    En este tipo de ambiente, se selecciona alguna persona del grupo de trabajo, que va ser 
    la unica persona que puede hacer despliegue de estos ambientes.
    Ej:
    Produccion, ya que es un ambiente muy importante, solo hay unas cuantas personas que 
    tienen permiso para hacer cambios y desplegar.

Definicion de un ambiente dentro del archivo gitlab-ci.yml;

    deploy_production:
        stage: deploy
        environment:
            name: production
            url: 'opcional'
        when: manual



---------------------------------------
Feature Flags
Esto es una tecnica que permite que los equipos de trabajo puedan modificar el comportamiento 
del sistema sin la necesidad de modificar el codigo o realizar un nuevo despliegue.

Esto tiene una gran desventaja y es que si no sabemos como controlar las Feature flags, podemos 
construir un sistema en el cual no sea posible escribir pruebas unitarias.
Por ende, se recomienda que hayan pocas Feature flags.


Tipos de Feature flags

- Release Flags
Este tipo de bandera permite implementar Continuous Delivery, donde los diferentes features se 
activan de manera manual e independiente. Este es importante cuando se requiere lanzar una 
funcionalidad compleja que tiene estar al 100%, o cuando se necesita coordinar un evento 
externo junto con el despliegue de funcionalidad.
Ej: Lanzamiento en conjunto con una campaña de Marketing.

- Experiment Flags
Exte tipo de bandera se utiliza cuando la aplicacion permite hacer pruebas de una manera 
segmentada/dividida en dos, para mostrar las diferentes funcionaldades dependiendo del segmento.
Este tipo de Flag tiene un tiempo de vida muy corto, ya que con los resultados se decide que 
opcion es mejor, y se estandariza el uso en el sistema.

- Ops Flags
Esta permite crear switches con los cuales podemos controlar el comportamiento el sistema cuando 
esta corriendo.
Esto suele ser invocado cuando hay cargas inusuales en los cuales es necesario optimizar los 
recursos que hay disponibles para servir a la aplicacion.

- Permission Flags
Permite habilitar funcionalidades para usuarios especificos dentro de la aplicacion.

